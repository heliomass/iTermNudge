#!/bin/bash

# Note that this script is pretty dumb and will blindly pass
# the content you give it.
#
# For usage of the escape codes, see here:
#    https://www.iterm2.com/documentation-escape-codes.html
#

# Error codes:
#
# 0 All OK
# 1 Bad arguments

# Help
function show_help() {

cat << EOF
Usage:
	--color
		Changes the terminal colour.

		Use one of the following letters followed by
		a standard hex colour code:

		g = foreground
		h = background
		i = bold color
		j = selection color
		k = selected text color
		l = cursor
		m = cursor text

		E.g. Turn the background white:
		iterm_nudge --color hffffff

	--profile
		Changes the profile to the supplied name.

		E.g. Change profile to "my profile":
		iterm_nudge --profile my_profile


	--cursor
		Changes the cursor.

		Use the following codes:
		0: Block
		1: Vertical bar
		2: Underline

		E.g. Change cursor to underline:
		iterm_nudge --cursor 2

	--annotate
		Adds an annotation.

		E.g. Add an annotation saying "Hello World!" (original, I know)
		iterm_nudge --annotate 'Hello World!'

        --badge
                Sets a badge

		E.g. Set a badge with the current directory:
		iterm_nudge --badge "$(pwd)"

        --clear_badge
                Clears the badge

		I.e.
		iterm_nudge --clear_badge
		(note, this will override the --badge argument if both are supplied)

	--tab-color
		Change the colour of the current tab. Ca be one of:

		    red, orange, yellow, green, blue, violet, gray

		If an invalid colour is provided, it will fail silently

	--tab-reset
		Reset the colour

	--force
		Use this to output the escape codes even if $TERM_PROGRAM isn't
		set to iTerm. Useful if you're in an ssh session, but you weren't able
		to pass through TERM_PROGRAM from the client. Does not require a second argument.

	Run the command without any arguments to discover if you're in an iTerm or not.
	E.g.:

	iterm_nudge && echo "You're in an iTerm session" || echo "You're not running iTerm :("

EOF

}

# Transformation options
color=
profile=
cursor=
annotate=
badge=
clear_badge=0
tab_color=
tab_reset=0

# Force if not iTerm
force=0

# Extra escaping for TMUX (yuk!)
pre_esc=
post_esc=
if [ ! -z "$TMUX" ]; then
	pre_esc='\ePtmux;\e'
	post_esc='\e\'
fi

while [ $# -gt 0 ]; do
	case "$1" in
		--color|--colour)
			if [ $# -lt 2 ]; then
				exit 1
			fi
			color=$2
			shift 2
			;;
		--profile)
			if [ $# -lt 2 ]; then
				exit 1
			fi
			profile=$2
			shift 2
			;;
		--cursor)
			if [ $# -lt 2 ]; then
				exit 1
			fi
			cursor=$2
			shift 2
			;;
		--annotate)
			if [ $# -lt 2 ]; then
				exit 1
			fi
			annotate=$2
			shift 2
			;;
		--badge)
			if [ $# -lt 2 ]; then
				exit 1
			elif [ -z "$2" ]; then
				clear_badge=1
			else
				badge=$2
			fi
			shift 2;
			;;
		--tab-color|--tab-colour)
			if [ $# -lt 2 ]; then
				exit 1
			else
				tab_color=$2
			fi
			shift 2
			;;
		--tab-reset)
			tab_reset=1
			shift
			;;
		--clear_badge)
			clear_badge=1
			shift
			;;
		--force)
			force=1
			shift
			;;
		--help|-h|-?)
			show_help
			shift
			exit 0
			;;
		*)
			echo "Unrecognised option ${1}."
			exit 1
			;;
	esac
done

# If we're not in iTerm (or we're not forcing things) exit gracefully
if [ "$TERM_PROGRAM" != "iTerm.app" -a $force -ne 1 ]; then
	exit 1
fi

if [ ! -z "$color" ]; then

	printf "${pre_esc}\e]P${color}\e\\"

fi

if [ ! -z "$profile" ]; then

	printf "${pre_esc}\e]1337;SetProfile=${profile}\a${post_esc}"

fi

if [ ! -z "$cursor" ]; then

	printf "${pre_esc}\e]1337;CursorShape=${cursor}\a${post_esc}"

fi

if [ ! -z "$annotate" ]; then

	printf "${pre_esc}\e]1337;AddAnnotation=${annotate}\a${post_esc}"
fi

if [ $clear_badge -eq 1 ]; then

	printf "${pre_esc}\e]1337;SetBadgeFormat=\a${post_esc}"

elif [ ! -z "$badge" ]; then

	printf "${pre_esc}\e]1337;SetBadgeFormat=%s\a${post_esc}" $(echo "$badge" | base64)

fi

if [ ! -z "tab_color" ]; then

	case "$tab_color" in
		red)
			printf "${pre_esc}\033]6;1;bg;red;brightness;255\a${post_esc}"
			printf "${pre_esc}\033]6;1;bg;green;brightness;87\a${post_esc}"
			printf "${pre_esc}\033]6;1;bg;blue;brightness;80\a${post_esc}"
			;;
		orange)
			printf "${pre_esc}\033]6;1;bg;red;brightness;255\a${post_esc}"
			printf "${pre_esc}\033]6;1;bg;green;brightness;170\a${post_esc}"
			printf "${pre_esc}\033]6;1;bg;blue;brightness;11\a${post_esc}"
			;;
		yellow)
			printf "${pre_esc}\033]6;1;bg;red;brightness;242\a${post_esc}"
			printf "${pre_esc}\033]6;1;bg;green;brightness;225\a${post_esc}"
			printf "${pre_esc}\033]6;1;bg;blue;brightness;18\a${post_esc}"
			;;
		green)
			printf "${pre_esc}\033]6;1;bg;red;brightness;168\a${post_esc}"
			printf "${pre_esc}\033]6;1;bg;green;brightness;223\a${post_esc}"
			printf "${pre_esc}\033]6;1;bg;blue;brightness;32\a${post_esc}"
			;;
		blue)
			printf "${pre_esc}\033]6;1;bg;red;brightness;75\a${post_esc}"
			printf "${pre_esc}\033]6;1;bg;green;brightness;158\a${post_esc}"
			printf "${pre_esc}\033]6;1;bg;blue;brightness;255\a${post_esc}"
			;;
		violet)
			printf "${pre_esc}\033]6;1;bg;red;brightness;205\a${post_esc}"
			printf "${pre_esc}\033]6;1;bg;green;brightness;130\a${post_esc}"
			printf "${pre_esc}\033]6;1;bg;blue;brightness;221\a${post_esc}"
			;;
		gray|grey)
			printf "${pre_esc}\033]6;1;bg;red;brightness;120\a${post_esc}"
			printf "${pre_esc}\033]6;1;bg;green;brightness;120\a${post_esc}"
			printf "${pre_esc}\033]6;1;bg;blue;brightness;120\a${post_esc}"
			;;
	esac

fi

if [ $tab_reset -eq 1 ]; then

	printf "${pre_esc}\033]6;1;bg;*;default\a${post_esc}"

fi

exit 0
